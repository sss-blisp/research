# -*- coding: utf-8 -*-
"""XGBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ulUf6KpqI8VUc4_0X32cIahG_HESiHgd
"""

from google.colab import drive
drive.mount('/content/drive')

"""### pip"""

!pip install xgboost
!pip install shap
!pip install japanize-matplotlib

import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import scale
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
import matplotlib.pyplot as plt
import matplotlib.pylab as plb
import japanize_matplotlib
import shap
import seaborn as sns

import pandas as pd
import glob

from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score

import xgboost as xgb

"""### 関数"""

def pd_read(number):

  test = []
  train = []
  # testデータ用
  for i in range(2):
    test_df = pd.read_csv('/content/drive/My Drive/' +str(number) +'/test'+str(i)+'.csv') #クラスタリング
    test_df  = Preprocessing(test_df)
    test.append(test_df)
  test_df = pd.concat(test, axis=0, sort=True)

  # trainデータ用
  # for i in range(31):
  for i in range(20):
    train_df = pd.read_csv('/content/drive/My Drive/' +str(number) +'/train'+str(i)+'.csv')
    # train_df = Preprocessing(train_df)
    train.append(train_df)
  train_df = pd.concat(train, axis=0, sort=True)

  return test_df, train_df

def Preprocessing(test_df):
  df_x = test_df[
    [


 'AU10_r', 'AU14_r', 'AU06_r', 'AU17_r', 'AU04_r','AU12_r','pose_Ry','dis_eyelids_right', 'dis_eyelids_left'
    ]
  ]
  df_y = test_df['pain'] # ラベルエンコーディング

  df = pd.concat([df_y, df_x], axis=1)
  return df


def train(df):
  df_x = df[
      [
 'AU10_r', 'AU14_r', 'AU06_r', 'AU17_r', 'AU04_r','AU12_r','pose_Ry','dis_eyelids_right', 'dis_eyelids_left'
      ]
  ]

  df_y = df['pain'] # ラベルエンコーディング

  train_x =df_x.to_numpy(dtype=float)
  train_y =df_y.to_numpy(dtype=float)

  xgb_train = xgb.DMatrix(train_x, label=train_y, feature_names=df_x.columns.tolist())
  xgb_model = xgb.train(
    param,
    xgb_train,
    )
  return xgb_model

def test(df, xgb_model):
  df_x = df[
      [
 'AU10_r', 'AU14_r', 'AU06_r', 'AU17_r', 'AU04_r','AU12_r','pose_Ry','dis_eyelids_right', 'dis_eyelids_left'
      ]
  ]

  df_y = df['pain'] # ラベルエンコーディング

  test_x =df_x.to_numpy(dtype=float)
  test_y =df_y.to_numpy(dtype=float)
  xgb_test = xgb.DMatrix(test_x, label=test_y, feature_names=df_x.columns.tolist())
  dlrm_Y_pred_proba = xgb_model.predict(xgb_test)
  dlrm_Y_pred_proba_80 = np.where(dlrm_Y_pred_proba > 0.8, 1, 0)

  return accuracy_score(test_y, dlrm_Y_pred_proba_80), recall_score(test_y, dlrm_Y_pred_proba_80)

"""### 学習"""

param = {
    # 2値分類問題
    'objective':'binary:logistic',
    # 評価指標
    'eval_metric':'logloss'
}

"""### 実行"""

accs = []
recs = []

for i in range(11):
  df_test, df_train = pd_read(i)
  xgb_model = train(df_train)
  acc , rec = test(df_test, xgb_model)
  accs.append(acc)
  recs.append(rec)

print(sum(accs)/len(accs))
print(sum(recs)/len(recs))