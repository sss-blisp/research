# -*- coding: utf-8 -*-
"""random_forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sf8PBdjrYFplCdw3gyqr9W5RdoFAEidN
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification


def pd_read(number):

  test = []
  train = []
  # testデータ用
  for i in range(2):
    test_df = pd.read_csv('/content/drive/My Drive/' +str(number) +'/test'+str(i)+'.csv') #クラスタリング
    test_df  = Preprocessing(test_df)
    test.append(test_df)
  test_df = pd.concat(test, axis=0, sort=True)

  # trainデータ用
  # for i in range(31):
  for i in range(20):
    train_df = pd.read_csv('/content/drive/My Drive/' +str(number) +'/train'+str(i)+'.csv')

    # train_df = Preprocessing(train_df)
    train.append(train_df)
  train_df = pd.concat(train, axis=0, sort=True)

  return test_df, train_df

def Preprocessing(test_df):
  df_x = test_df[
    [
       'AU01_r','AU02_r','AU04_r','AU05_r','AU06_r','AU07_r','AU09_r','AU10_r','AU12_r','AU14_r', 'AU15_r', 'AU17_r', 'AU20_r', 'AU23_r', 'AU25_r', 'AU26_r', 'AU45_r',
        'dis_right_outer', 'dis_right_inner', 'dis_left_outer', 'dis_left_inner',
        'dis_eyelids_right', 'dis_eyelids_left',
        'pose_Rx', 'pose_Ry', 'pose_Rz'
    ]
  ]
  df_y = test_df['pain'] # ラベルエンコーディング

  df = pd.concat([df_y, df_x], axis=1)
  return df

def train(df):
  df_x = df[
      [
       'AU01_r','AU02_r','AU04_r','AU05_r','AU06_r','AU07_r','AU09_r','AU10_r','AU12_r','AU14_r', 'AU15_r', 'AU17_r', 'AU20_r', 'AU23_r', 'AU25_r', 'AU26_r', 'AU45_r',
        'dis_right_outer', 'dis_right_inner', 'dis_left_outer', 'dis_left_inner',
        'dis_eyelids_right', 'dis_eyelids_left',
        'pose_Rx', 'pose_Ry', 'pose_Rz'
      ]
  ]

  df_y = df['pain'] # ラベルエンコーディング

  train_x =df_x.to_numpy(dtype=float)
  train_y =df_y.to_numpy(dtype=float)

  # 学習
  clf = RandomForestClassifier(max_depth=2, random_state=0)
  clf.fit(train_x, train_y)
  return clf

def test(df, xgb_model):
  acc = []
  loss = []
  df_x = df[
      [
       'AU01_r','AU02_r','AU04_r','AU05_r','AU06_r','AU07_r','AU09_r','AU10_r','AU12_r','AU14_r', 'AU15_r', 'AU17_r', 'AU20_r', 'AU23_r', 'AU25_r', 'AU26_r', 'AU45_r',
        'dis_right_outer', 'dis_right_inner', 'dis_left_outer', 'dis_left_inner',
        'dis_eyelids_right', 'dis_eyelids_left',
        'pose_Rx', 'pose_Ry', 'pose_Rz'
      ]
  ]

  df_y = df['pain'] # ラベルエンコーディング

  test_x =df_x.to_numpy(dtype=float)
  test_y =df_y.to_numpy(dtype=float)
  pred_y = clf.predict(test_x)

  acc = clf.score(test_x, test_y)
  rec = metrics.recall_score(test_y, pred_y, average='binary')

  return acc, rec

from sklearn import metrics

"""### 実行"""

accs = []
recs = []
for i in range(11):
  df_test, df_train = pd_read(i)
  clf = train(df_train)
  acc, rec = test(df_test, clf)
  accs.append(acc)
  recs.append(rec)

print(sum(accs)/len(accs))
print(sum(recs)/len(recs))

"""### Feature Importance

"""

fti = clf.feature_importances_

print('Feature Importances:')
for i, feat in enumerate(df_x):
    print('\t{0:20s} : {1:>.6f}'.format(feat, fti[i]))

"""### SHAP値 算出"""

pip install shap

import shap

explainer = shap.TreeExplainer(clf, train_x)

shap_values = explainer.shap_values(train_x,check_additivity=False)

shap.summary_plot(shap_values, train_x, feature_names=df_x.columns.values)

shap.summary_plot(shap_values, train_x, feature_names=df_x.columns.values, axis_color='#000000', show=False,plot_type = "bar")